# - *- coding: utf- 8 - *-
import os

import aiofiles
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, Message, CallbackQuery
from aiogram.utils.media_group import MediaGroupBuilder

from bot.data.config import PATH_DATABASE, PATH_LOGS
from bot.utils.const_functions import get_date
from bot.utils.misc.bot_models import FSM, ARS
from bot.keyboards.reply_main import admin_rep

router = Router(name=__name__)

# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 
@router.message(F.text == "üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞")
async def open_admin_menu(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    
    await message.answer(
        "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        reply_markup=admin_rep(user_id=message.from_user.id)
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
@router.message(Command(commands=['db', 'database']))
async def admin_database(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer_document(
        FSInputFile(PATH_DATABASE),
        caption=f"<b>üì¶ #BACKUP | <code>{get_date()}</code></b>",
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
@router.message(Command(commands=['log', 'logs']))
async def admin_log(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    media_group = MediaGroupBuilder(
        caption=f"<b>üñ® #LOGS | <code>{get_date(full=False)}</code></b>",
    )

    if os.path.isfile(PATH_LOGS):
        media_group.add_document(media=FSInputFile(PATH_LOGS))

    if os.path.isfile("tgbot/data/sv_log_err.log"):
        media_group.add_document(media=FSInputFile("tgbot/data/sv_log_err.log"))

    if os.path.isfile("tgbot/data/sv_log_out.log"):
        media_group.add_document(media=FSInputFile("tgbot/data/sv_log_out.log"))

    await message.answer_media_group(media=media_group.build())


# –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
@router.message(Command(commands=['clear_log', 'clear_logs', 'log_clear', 'logs_clear']))
async def admin_logs_clear(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    if os.path.isfile(PATH_LOGS):
        async with aiofiles.open(PATH_LOGS, "w") as file:
            await file.write(f"{get_date()} | LOGS WAS CLEAR")

    if os.path.isfile("tgbot/data/sv_log_err.log"):
        async with aiofiles.open("tgbot/data/sv_log_err.log", "w") as file:
            await file.write(f"{get_date()} | LOGS WAS CLEAR")

    if os.path.isfile("tgbot/data/sv_log_out.log"):
        async with aiofiles.open("tgbot/data/sv_log_out.log", "w") as file:
            await file.write(f"{get_date()} | LOGS WAS CLEAR")

    await message.answer("<b>üñ® –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã</b>")